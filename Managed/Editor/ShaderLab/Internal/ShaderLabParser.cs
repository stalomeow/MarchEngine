//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ShaderLab.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DX12Demo.Editor.ShaderLab.Internal {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class ShaderLabParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, HlslProgram=26, Assign=27, LeftBrace=28, RightBrace=29, StringLiteral=30, 
		BracketLiteral=31, IntegerLiteral=32, FloatLiteral=33, Float=34, Int=35, 
		Color=36, Vector=37, Texture=38, On=39, Off=40, Front=41, Back=42, Zero=43, 
		One=44, SrcColor=45, InvSrcColor=46, SrcAlpha=47, InvSrcAlpha=48, DestAlpha=49, 
		InvDestAlpha=50, DestColor=51, InvDestColor=52, SrcAlphaSat=53, Add=54, 
		Sub=55, RevSub=56, Min=57, Max=58, Never=59, Less=60, Equal=61, LessEqual=62, 
		Greater=63, NotEqual=64, GreaterEqual=65, Always=66, Keep=67, Replace=68, 
		IncrSat=69, DecrSat=70, Invert=71, Incr=72, Decr=73, Identifier=74, Whitespace=75, 
		Newline=76, BlockComment=77, LineComment=78;
	public const int
		RULE_shader = 0, RULE_shaderDeclaration = 1, RULE_propertiesBlock = 2, 
		RULE_passBlock = 3, RULE_passDeclaration = 4, RULE_attributeDeclaration = 5, 
		RULE_numberLiteralExpression = 6, RULE_vectorLiteralExpression = 7, RULE_textureLiteralExpression = 8, 
		RULE_propertyDefaultValueExpression = 9, RULE_propertyTypeDeclaration = 10, 
		RULE_propertyDeclaration = 11, RULE_nameDeclaration = 12, RULE_cullDeclaration = 13, 
		RULE_zTestDeclaration = 14, RULE_zWriteDeclaration = 15, RULE_blendDeclaration = 16, 
		RULE_blendOpDeclaration = 17, RULE_colorMaskDeclaration = 18, RULE_stencilBlock = 19, 
		RULE_stencilDeclaration = 20, RULE_stencilRefDeclaration = 21, RULE_stencilReadMaskDeclaration = 22, 
		RULE_stencilWriteMaskDeclaration = 23, RULE_stencilCompFrontDeclaration = 24, 
		RULE_stencilPassFrontDeclaration = 25, RULE_stencilFailFrontDeclaration = 26, 
		RULE_stencilZFailFrontDeclaration = 27, RULE_stencilCompBackDeclaration = 28, 
		RULE_stencilPassBackDeclaration = 29, RULE_stencilFailBackDeclaration = 30, 
		RULE_stencilZFailBackDeclaration = 31, RULE_hlslProgramDeclaration = 32, 
		RULE_cullModeValue = 33, RULE_blendFactorValue = 34, RULE_blendOpValue = 35, 
		RULE_compareFuncValue = 36, RULE_stencilOpValue = 37;
	public static readonly string[] ruleNames = {
		"shader", "shaderDeclaration", "propertiesBlock", "passBlock", "passDeclaration", 
		"attributeDeclaration", "numberLiteralExpression", "vectorLiteralExpression", 
		"textureLiteralExpression", "propertyDefaultValueExpression", "propertyTypeDeclaration", 
		"propertyDeclaration", "nameDeclaration", "cullDeclaration", "zTestDeclaration", 
		"zWriteDeclaration", "blendDeclaration", "blendOpDeclaration", "colorMaskDeclaration", 
		"stencilBlock", "stencilDeclaration", "stencilRefDeclaration", "stencilReadMaskDeclaration", 
		"stencilWriteMaskDeclaration", "stencilCompFrontDeclaration", "stencilPassFrontDeclaration", 
		"stencilFailFrontDeclaration", "stencilZFailFrontDeclaration", "stencilCompBackDeclaration", 
		"stencilPassBackDeclaration", "stencilFailBackDeclaration", "stencilZFailBackDeclaration", 
		"hlslProgramDeclaration", "cullModeValue", "blendFactorValue", "blendOpValue", 
		"compareFuncValue", "stencilOpValue"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Shader'", "'Properties'", "'Pass'", "'('", "','", "')'", "'Name'", 
		"'Cull'", "'ZTest'", "'ZWrite'", "'Blend'", "'BlendOp'", "'ColorMask'", 
		"'Stencil'", "'Ref'", "'ReadMask'", "'WriteMask'", "'CompFront'", "'PassFront'", 
		"'FailFront'", "'ZFailFront'", "'CompBack'", "'PassBack'", "'FailBack'", 
		"'ZFailBack'", null, "'='", "'{'", "'}'", null, null, null, null, "'Float'", 
		"'Int'", "'Color'", "'Vector'", "'2D'", "'On'", "'Off'", "'Front'", "'Back'", 
		"'Zero'", "'One'", "'SrcColor'", "'InvSrcColor'", "'SrcAlpha'", "'InvSrcAlpha'", 
		"'DestAlpha'", "'InvDestAlpha'", "'DestColor'", "'InvDestColor'", "'SrcAlphaSat'", 
		"'Add'", "'Sub'", "'RevSub'", "'Min'", "'Max'", "'Never'", "'Less'", "'Equal'", 
		"'LessEqual'", "'Greater'", "'NotEqual'", "'GreaterEqual'", "'Always'", 
		"'Keep'", "'Replace'", "'IncrSat'", "'DecrSat'", "'Invert'", "'Incr'", 
		"'Decr'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "HlslProgram", "Assign", "LeftBrace", "RightBrace", "StringLiteral", 
		"BracketLiteral", "IntegerLiteral", "FloatLiteral", "Float", "Int", "Color", 
		"Vector", "Texture", "On", "Off", "Front", "Back", "Zero", "One", "SrcColor", 
		"InvSrcColor", "SrcAlpha", "InvSrcAlpha", "DestAlpha", "InvDestAlpha", 
		"DestColor", "InvDestColor", "SrcAlphaSat", "Add", "Sub", "RevSub", "Min", 
		"Max", "Never", "Less", "Equal", "LessEqual", "Greater", "NotEqual", "GreaterEqual", 
		"Always", "Keep", "Replace", "IncrSat", "DecrSat", "Invert", "Incr", "Decr", 
		"Identifier", "Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ShaderLab.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ShaderLabParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ShaderLabParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ShaderLabParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ShaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(ShaderLabParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ShaderLabParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ShaderLabParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShaderDeclarationContext[] shaderDeclaration() {
			return GetRuleContexts<ShaderDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderDeclarationContext shaderDeclaration(int i) {
			return GetRuleContext<ShaderDeclarationContext>(i);
		}
		public ShaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderContext shader() {
		ShaderContext _localctx = new ShaderContext(Context, State);
		EnterRule(_localctx, 0, RULE_shader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(T__0);
			State = 77;
			Match(StringLiteral);
			State = 78;
			Match(LeftBrace);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1 || _la==T__2) {
				{
				{
				State = 79;
				shaderDeclaration();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 85;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesBlockContext propertiesBlock() {
			return GetRuleContext<PropertiesBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PassBlockContext passBlock() {
			return GetRuleContext<PassBlockContext>(0);
		}
		public ShaderDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderDeclarationContext shaderDeclaration() {
		ShaderDeclarationContext _localctx = new ShaderDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_shaderDeclaration);
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				propertiesBlock();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				passBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertiesBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ShaderLabParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ShaderLabParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDeclarationContext[] propertyDeclaration() {
			return GetRuleContexts<PropertyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDeclarationContext propertyDeclaration(int i) {
			return GetRuleContext<PropertyDeclarationContext>(i);
		}
		public PropertiesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertiesBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertiesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertiesBlockContext propertiesBlock() {
		PropertiesBlockContext _localctx = new PropertiesBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_propertiesBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(T__1);
			State = 92;
			Match(LeftBrace);
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BracketLiteral || _la==Identifier) {
				{
				{
				State = 93;
				propertyDeclaration();
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 99;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PassBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ShaderLabParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ShaderLabParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PassDeclarationContext[] passDeclaration() {
			return GetRuleContexts<PassDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PassDeclarationContext passDeclaration(int i) {
			return GetRuleContext<PassDeclarationContext>(i);
		}
		public PassBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_passBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PassBlockContext passBlock() {
		PassBlockContext _localctx = new PassBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_passBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(T__2);
			State = 102;
			Match(LeftBrace);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 67141504L) != 0)) {
				{
				{
				State = 103;
				passDeclaration();
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 109;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameDeclarationContext nameDeclaration() {
			return GetRuleContext<NameDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CullDeclarationContext cullDeclaration() {
			return GetRuleContext<CullDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ZTestDeclarationContext zTestDeclaration() {
			return GetRuleContext<ZTestDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ZWriteDeclarationContext zWriteDeclaration() {
			return GetRuleContext<ZWriteDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlendDeclarationContext blendDeclaration() {
			return GetRuleContext<BlendDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlendOpDeclarationContext blendOpDeclaration() {
			return GetRuleContext<BlendOpDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColorMaskDeclarationContext colorMaskDeclaration() {
			return GetRuleContext<ColorMaskDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilBlockContext stencilBlock() {
			return GetRuleContext<StencilBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HlslProgramDeclarationContext hlslProgramDeclaration() {
			return GetRuleContext<HlslProgramDeclarationContext>(0);
		}
		public PassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_passDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PassDeclarationContext passDeclaration() {
		PassDeclarationContext _localctx = new PassDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_passDeclaration);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111;
				nameDeclaration();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112;
				cullDeclaration();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 113;
				zTestDeclaration();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 4);
				{
				State = 114;
				zWriteDeclaration();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 5);
				{
				State = 115;
				blendDeclaration();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 6);
				{
				State = 116;
				blendOpDeclaration();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 7);
				{
				State = 117;
				colorMaskDeclaration();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 8);
				{
				State = 118;
				stencilBlock();
				}
				break;
			case HlslProgram:
				EnterOuterAlt(_localctx, 9);
				{
				State = 119;
				hlslProgramDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BracketLiteral() { return GetToken(ShaderLabParser.BracketLiteral, 0); }
		public AttributeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeDeclarationContext attributeDeclaration() {
		AttributeDeclarationContext _localctx = new AttributeDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_attributeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(BracketLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(ShaderLabParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatLiteral() { return GetToken(ShaderLabParser.FloatLiteral, 0); }
		public NumberLiteralExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteralExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralExpressionContext numberLiteralExpression() {
		NumberLiteralExpressionContext _localctx = new NumberLiteralExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_numberLiteralExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			_la = TokenStream.LA(1);
			if ( !(_la==IntegerLiteral || _la==FloatLiteral) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorLiteralExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralExpressionContext[] numberLiteralExpression() {
			return GetRuleContexts<NumberLiteralExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralExpressionContext numberLiteralExpression(int i) {
			return GetRuleContext<NumberLiteralExpressionContext>(i);
		}
		public VectorLiteralExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorLiteralExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectorLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorLiteralExpressionContext vectorLiteralExpression() {
		VectorLiteralExpressionContext _localctx = new VectorLiteralExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_vectorLiteralExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(T__3);
			State = 127;
			numberLiteralExpression();
			State = 128;
			Match(T__4);
			State = 129;
			numberLiteralExpression();
			State = 130;
			Match(T__4);
			State = 131;
			numberLiteralExpression();
			State = 132;
			Match(T__4);
			State = 133;
			numberLiteralExpression();
			State = 134;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextureLiteralExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(ShaderLabParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ShaderLabParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ShaderLabParser.RightBrace, 0); }
		public TextureLiteralExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textureLiteralExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextureLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextureLiteralExpressionContext textureLiteralExpression() {
		TextureLiteralExpressionContext _localctx = new TextureLiteralExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_textureLiteralExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(StringLiteral);
			State = 137;
			Match(LeftBrace);
			State = 138;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDefaultValueExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralExpressionContext numberLiteralExpression() {
			return GetRuleContext<NumberLiteralExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VectorLiteralExpressionContext vectorLiteralExpression() {
			return GetRuleContext<VectorLiteralExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextureLiteralExpressionContext textureLiteralExpression() {
			return GetRuleContext<TextureLiteralExpressionContext>(0);
		}
		public PropertyDefaultValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDefaultValueExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDefaultValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDefaultValueExpressionContext propertyDefaultValueExpression() {
		PropertyDefaultValueExpressionContext _localctx = new PropertyDefaultValueExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_propertyDefaultValueExpression);
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
			case FloatLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140;
				numberLiteralExpression();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 141;
				vectorLiteralExpression();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 142;
				textureLiteralExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(ShaderLabParser.Float, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(ShaderLabParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Color() { return GetToken(ShaderLabParser.Color, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Vector() { return GetToken(ShaderLabParser.Vector, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Texture() { return GetToken(ShaderLabParser.Texture, 0); }
		public PropertyTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyTypeDeclarationContext propertyTypeDeclaration() {
		PropertyTypeDeclarationContext _localctx = new PropertyTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_propertyTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 532575944704L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ShaderLabParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(ShaderLabParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyTypeDeclarationContext propertyTypeDeclaration() {
			return GetRuleContext<PropertyTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(ShaderLabParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDefaultValueExpressionContext propertyDefaultValueExpression() {
			return GetRuleContext<PropertyDefaultValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		public PropertyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDeclarationContext propertyDeclaration() {
		PropertyDeclarationContext _localctx = new PropertyDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_propertyDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BracketLiteral) {
				{
				{
				State = 147;
				attributeDeclaration();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 153;
			Match(Identifier);
			State = 154;
			Match(T__3);
			State = 155;
			Match(StringLiteral);
			State = 156;
			Match(T__4);
			State = 157;
			propertyTypeDeclaration();
			State = 158;
			Match(T__5);
			State = 159;
			Match(Assign);
			State = 160;
			propertyDefaultValueExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(ShaderLabParser.StringLiteral, 0); }
		public NameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameDeclarationContext nameDeclaration() {
		NameDeclarationContext _localctx = new NameDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_nameDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(T__6);
			State = 163;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CullDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CullModeValueContext cullModeValue() {
			return GetRuleContext<CullModeValueContext>(0);
		}
		public CullDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cullDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCullDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CullDeclarationContext cullDeclaration() {
		CullDeclarationContext _localctx = new CullDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_cullDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(T__7);
			State = 166;
			cullModeValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZTestDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Off() { return GetToken(ShaderLabParser.Off, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompareFuncValueContext compareFuncValue() {
			return GetRuleContext<CompareFuncValueContext>(0);
		}
		public ZTestDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zTestDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZTestDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZTestDeclarationContext zTestDeclaration() {
		ZTestDeclarationContext _localctx = new ZTestDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_zTestDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(T__8);
			State = 171;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Off:
				{
				State = 169;
				Match(Off);
				}
				break;
			case Never:
			case Less:
			case Equal:
			case LessEqual:
			case Greater:
			case NotEqual:
			case GreaterEqual:
			case Always:
				{
				State = 170;
				compareFuncValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZWriteDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Off() { return GetToken(ShaderLabParser.Off, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode On() { return GetToken(ShaderLabParser.On, 0); }
		public ZWriteDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zWriteDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZWriteDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZWriteDeclarationContext zWriteDeclaration() {
		ZWriteDeclarationContext _localctx = new ZWriteDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_zWriteDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(T__9);
			State = 174;
			_la = TokenStream.LA(1);
			if ( !(_la==On || _la==Off) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlendDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(ShaderLabParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Off() { return GetToken(ShaderLabParser.Off, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlendFactorValueContext[] blendFactorValue() {
			return GetRuleContexts<BlendFactorValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlendFactorValueContext blendFactorValue(int i) {
			return GetRuleContext<BlendFactorValueContext>(i);
		}
		public BlendDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blendDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlendDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlendDeclarationContext blendDeclaration() {
		BlendDeclarationContext _localctx = new BlendDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_blendDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(T__10);
			State = 177;
			Match(IntegerLiteral);
			State = 185;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Off:
				{
				State = 178;
				Match(Off);
				}
				break;
			case Zero:
			case One:
			case SrcColor:
			case InvSrcColor:
			case SrcAlpha:
			case InvSrcAlpha:
			case DestAlpha:
			case InvDestAlpha:
			case DestColor:
			case InvDestColor:
			case SrcAlphaSat:
				{
				{
				State = 179;
				blendFactorValue();
				State = 180;
				blendFactorValue();
				State = 181;
				Match(T__4);
				State = 182;
				blendFactorValue();
				State = 183;
				blendFactorValue();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlendOpDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(ShaderLabParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlendOpValueContext[] blendOpValue() {
			return GetRuleContexts<BlendOpValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlendOpValueContext blendOpValue(int i) {
			return GetRuleContext<BlendOpValueContext>(i);
		}
		public BlendOpDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blendOpDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlendOpDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlendOpDeclarationContext blendOpDeclaration() {
		BlendOpDeclarationContext _localctx = new BlendOpDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_blendOpDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(T__11);
			State = 188;
			Match(IntegerLiteral);
			State = 189;
			blendOpValue();
			State = 190;
			Match(T__4);
			State = 191;
			blendOpValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColorMaskDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IntegerLiteral() { return GetTokens(ShaderLabParser.IntegerLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral(int i) {
			return GetToken(ShaderLabParser.IntegerLiteral, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ShaderLabParser.Identifier, 0); }
		public ColorMaskDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colorMaskDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColorMaskDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColorMaskDeclarationContext colorMaskDeclaration() {
		ColorMaskDeclarationContext _localctx = new ColorMaskDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_colorMaskDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(T__12);
			State = 194;
			Match(IntegerLiteral);
			State = 195;
			_la = TokenStream.LA(1);
			if ( !(_la==IntegerLiteral || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ShaderLabParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ShaderLabParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StencilDeclarationContext[] stencilDeclaration() {
			return GetRuleContexts<StencilDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilDeclarationContext stencilDeclaration(int i) {
			return GetRuleContext<StencilDeclarationContext>(i);
		}
		public StencilBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilBlockContext stencilBlock() {
		StencilBlockContext _localctx = new StencilBlockContext(Context, State);
		EnterRule(_localctx, 38, RULE_stencilBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(T__13);
			State = 198;
			Match(LeftBrace);
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 67076096L) != 0)) {
				{
				{
				State = 199;
				stencilDeclaration();
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 205;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StencilRefDeclarationContext stencilRefDeclaration() {
			return GetRuleContext<StencilRefDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilReadMaskDeclarationContext stencilReadMaskDeclaration() {
			return GetRuleContext<StencilReadMaskDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilWriteMaskDeclarationContext stencilWriteMaskDeclaration() {
			return GetRuleContext<StencilWriteMaskDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilCompFrontDeclarationContext stencilCompFrontDeclaration() {
			return GetRuleContext<StencilCompFrontDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilPassFrontDeclarationContext stencilPassFrontDeclaration() {
			return GetRuleContext<StencilPassFrontDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilFailFrontDeclarationContext stencilFailFrontDeclaration() {
			return GetRuleContext<StencilFailFrontDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilZFailFrontDeclarationContext stencilZFailFrontDeclaration() {
			return GetRuleContext<StencilZFailFrontDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilCompBackDeclarationContext stencilCompBackDeclaration() {
			return GetRuleContext<StencilCompBackDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilPassBackDeclarationContext stencilPassBackDeclaration() {
			return GetRuleContext<StencilPassBackDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilFailBackDeclarationContext stencilFailBackDeclaration() {
			return GetRuleContext<StencilFailBackDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilZFailBackDeclarationContext stencilZFailBackDeclaration() {
			return GetRuleContext<StencilZFailBackDeclarationContext>(0);
		}
		public StencilDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilDeclarationContext stencilDeclaration() {
		StencilDeclarationContext _localctx = new StencilDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_stencilDeclaration);
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207;
				stencilRefDeclaration();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 208;
				stencilReadMaskDeclaration();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 3);
				{
				State = 209;
				stencilWriteMaskDeclaration();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 4);
				{
				State = 210;
				stencilCompFrontDeclaration();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 5);
				{
				State = 211;
				stencilPassFrontDeclaration();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 6);
				{
				State = 212;
				stencilFailFrontDeclaration();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 7);
				{
				State = 213;
				stencilZFailFrontDeclaration();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 8);
				{
				State = 214;
				stencilCompBackDeclaration();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 9);
				{
				State = 215;
				stencilPassBackDeclaration();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 10);
				{
				State = 216;
				stencilFailBackDeclaration();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 11);
				{
				State = 217;
				stencilZFailBackDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilRefDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(ShaderLabParser.IntegerLiteral, 0); }
		public StencilRefDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilRefDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilRefDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilRefDeclarationContext stencilRefDeclaration() {
		StencilRefDeclarationContext _localctx = new StencilRefDeclarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_stencilRefDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(T__14);
			State = 221;
			Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilReadMaskDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(ShaderLabParser.IntegerLiteral, 0); }
		public StencilReadMaskDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilReadMaskDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilReadMaskDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilReadMaskDeclarationContext stencilReadMaskDeclaration() {
		StencilReadMaskDeclarationContext _localctx = new StencilReadMaskDeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_stencilReadMaskDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(T__15);
			State = 224;
			Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilWriteMaskDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(ShaderLabParser.IntegerLiteral, 0); }
		public StencilWriteMaskDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilWriteMaskDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilWriteMaskDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilWriteMaskDeclarationContext stencilWriteMaskDeclaration() {
		StencilWriteMaskDeclarationContext _localctx = new StencilWriteMaskDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_stencilWriteMaskDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(T__16);
			State = 227;
			Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilCompFrontDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareFuncValueContext compareFuncValue() {
			return GetRuleContext<CompareFuncValueContext>(0);
		}
		public StencilCompFrontDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilCompFrontDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilCompFrontDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilCompFrontDeclarationContext stencilCompFrontDeclaration() {
		StencilCompFrontDeclarationContext _localctx = new StencilCompFrontDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_stencilCompFrontDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(T__17);
			State = 230;
			compareFuncValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilPassFrontDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StencilOpValueContext stencilOpValue() {
			return GetRuleContext<StencilOpValueContext>(0);
		}
		public StencilPassFrontDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilPassFrontDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilPassFrontDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilPassFrontDeclarationContext stencilPassFrontDeclaration() {
		StencilPassFrontDeclarationContext _localctx = new StencilPassFrontDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_stencilPassFrontDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(T__18);
			State = 233;
			stencilOpValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilFailFrontDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StencilOpValueContext stencilOpValue() {
			return GetRuleContext<StencilOpValueContext>(0);
		}
		public StencilFailFrontDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilFailFrontDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilFailFrontDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilFailFrontDeclarationContext stencilFailFrontDeclaration() {
		StencilFailFrontDeclarationContext _localctx = new StencilFailFrontDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_stencilFailFrontDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			Match(T__19);
			State = 236;
			stencilOpValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilZFailFrontDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StencilOpValueContext stencilOpValue() {
			return GetRuleContext<StencilOpValueContext>(0);
		}
		public StencilZFailFrontDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilZFailFrontDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilZFailFrontDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilZFailFrontDeclarationContext stencilZFailFrontDeclaration() {
		StencilZFailFrontDeclarationContext _localctx = new StencilZFailFrontDeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_stencilZFailFrontDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(T__20);
			State = 239;
			stencilOpValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilCompBackDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareFuncValueContext compareFuncValue() {
			return GetRuleContext<CompareFuncValueContext>(0);
		}
		public StencilCompBackDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilCompBackDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilCompBackDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilCompBackDeclarationContext stencilCompBackDeclaration() {
		StencilCompBackDeclarationContext _localctx = new StencilCompBackDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_stencilCompBackDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(T__21);
			State = 242;
			compareFuncValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilPassBackDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StencilOpValueContext stencilOpValue() {
			return GetRuleContext<StencilOpValueContext>(0);
		}
		public StencilPassBackDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilPassBackDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilPassBackDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilPassBackDeclarationContext stencilPassBackDeclaration() {
		StencilPassBackDeclarationContext _localctx = new StencilPassBackDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_stencilPassBackDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(T__22);
			State = 245;
			stencilOpValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilFailBackDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StencilOpValueContext stencilOpValue() {
			return GetRuleContext<StencilOpValueContext>(0);
		}
		public StencilFailBackDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilFailBackDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilFailBackDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilFailBackDeclarationContext stencilFailBackDeclaration() {
		StencilFailBackDeclarationContext _localctx = new StencilFailBackDeclarationContext(Context, State);
		EnterRule(_localctx, 60, RULE_stencilFailBackDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(T__23);
			State = 248;
			stencilOpValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilZFailBackDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StencilOpValueContext stencilOpValue() {
			return GetRuleContext<StencilOpValueContext>(0);
		}
		public StencilZFailBackDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilZFailBackDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilZFailBackDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilZFailBackDeclarationContext stencilZFailBackDeclaration() {
		StencilZFailBackDeclarationContext _localctx = new StencilZFailBackDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_stencilZFailBackDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			Match(T__24);
			State = 251;
			stencilOpValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HlslProgramDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HlslProgram() { return GetToken(ShaderLabParser.HlslProgram, 0); }
		public HlslProgramDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hlslProgramDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHlslProgramDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HlslProgramDeclarationContext hlslProgramDeclaration() {
		HlslProgramDeclarationContext _localctx = new HlslProgramDeclarationContext(Context, State);
		EnterRule(_localctx, 64, RULE_hlslProgramDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(HlslProgram);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CullModeValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Off() { return GetToken(ShaderLabParser.Off, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Front() { return GetToken(ShaderLabParser.Front, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Back() { return GetToken(ShaderLabParser.Back, 0); }
		public CullModeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cullModeValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCullModeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CullModeValueContext cullModeValue() {
		CullModeValueContext _localctx = new CullModeValueContext(Context, State);
		EnterRule(_localctx, 66, RULE_cullModeValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7696581394432L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlendFactorValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Zero() { return GetToken(ShaderLabParser.Zero, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode One() { return GetToken(ShaderLabParser.One, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SrcColor() { return GetToken(ShaderLabParser.SrcColor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InvSrcColor() { return GetToken(ShaderLabParser.InvSrcColor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SrcAlpha() { return GetToken(ShaderLabParser.SrcAlpha, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InvSrcAlpha() { return GetToken(ShaderLabParser.InvSrcAlpha, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DestAlpha() { return GetToken(ShaderLabParser.DestAlpha, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InvDestAlpha() { return GetToken(ShaderLabParser.InvDestAlpha, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DestColor() { return GetToken(ShaderLabParser.DestColor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InvDestColor() { return GetToken(ShaderLabParser.InvDestColor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SrcAlphaSat() { return GetToken(ShaderLabParser.SrcAlphaSat, 0); }
		public BlendFactorValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blendFactorValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlendFactorValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlendFactorValueContext blendFactorValue() {
		BlendFactorValueContext _localctx = new BlendFactorValueContext(Context, State);
		EnterRule(_localctx, 68, RULE_blendFactorValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 18005602416459776L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlendOpValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(ShaderLabParser.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sub() { return GetToken(ShaderLabParser.Sub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RevSub() { return GetToken(ShaderLabParser.RevSub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Min() { return GetToken(ShaderLabParser.Min, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Max() { return GetToken(ShaderLabParser.Max, 0); }
		public BlendOpValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blendOpValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlendOpValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlendOpValueContext blendOpValue() {
		BlendOpValueContext _localctx = new BlendOpValueContext(Context, State);
		EnterRule(_localctx, 70, RULE_blendOpValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 558446353793941504L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareFuncValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Never() { return GetToken(ShaderLabParser.Never, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(ShaderLabParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(ShaderLabParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual() { return GetToken(ShaderLabParser.LessEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(ShaderLabParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(ShaderLabParser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual() { return GetToken(ShaderLabParser.GreaterEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Always() { return GetToken(ShaderLabParser.Always, 0); }
		public CompareFuncValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareFuncValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareFuncValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareFuncValueContext compareFuncValue() {
		CompareFuncValueContext _localctx = new CompareFuncValueContext(Context, State);
		EnterRule(_localctx, 72, RULE_compareFuncValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & 255L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilOpValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Keep() { return GetToken(ShaderLabParser.Keep, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Zero() { return GetToken(ShaderLabParser.Zero, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Replace() { return GetToken(ShaderLabParser.Replace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IncrSat() { return GetToken(ShaderLabParser.IncrSat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecrSat() { return GetToken(ShaderLabParser.DecrSat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Invert() { return GetToken(ShaderLabParser.Invert, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Incr() { return GetToken(ShaderLabParser.Incr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decr() { return GetToken(ShaderLabParser.Decr, 0); }
		public StencilOpValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilOpValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilOpValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilOpValueContext stencilOpValue() {
		StencilOpValueContext _localctx = new StencilOpValueContext(Context, State);
		EnterRule(_localctx, 74, RULE_stencilOpValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & 2130706433L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,78,266,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,1,0,1,0,1,0,1,0,5,0,81,8,0,10,0,12,0,84,9,0,1,0,1,
		0,1,1,1,1,3,1,90,8,1,1,2,1,2,1,2,5,2,95,8,2,10,2,12,2,98,9,2,1,2,1,2,1,
		3,1,3,1,3,5,3,105,8,3,10,3,12,3,108,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,3,4,121,8,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,3,9,144,8,9,1,10,1,10,1,11,5,11,
		149,8,11,10,11,12,11,152,9,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,3,14,172,8,14,1,15,1,
		15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,186,8,16,1,17,
		1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,5,19,201,8,
		19,10,19,12,19,204,9,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,1,20,1,20,3,20,219,8,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,
		1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,
		1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,
		1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,0,0,38,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
		60,62,64,66,68,70,72,74,0,9,1,0,32,33,1,0,34,38,1,0,39,40,2,0,32,32,74,
		74,1,0,40,42,1,0,43,53,1,0,54,58,1,0,59,66,2,0,43,43,67,73,255,0,76,1,
		0,0,0,2,89,1,0,0,0,4,91,1,0,0,0,6,101,1,0,0,0,8,120,1,0,0,0,10,122,1,0,
		0,0,12,124,1,0,0,0,14,126,1,0,0,0,16,136,1,0,0,0,18,143,1,0,0,0,20,145,
		1,0,0,0,22,150,1,0,0,0,24,162,1,0,0,0,26,165,1,0,0,0,28,168,1,0,0,0,30,
		173,1,0,0,0,32,176,1,0,0,0,34,187,1,0,0,0,36,193,1,0,0,0,38,197,1,0,0,
		0,40,218,1,0,0,0,42,220,1,0,0,0,44,223,1,0,0,0,46,226,1,0,0,0,48,229,1,
		0,0,0,50,232,1,0,0,0,52,235,1,0,0,0,54,238,1,0,0,0,56,241,1,0,0,0,58,244,
		1,0,0,0,60,247,1,0,0,0,62,250,1,0,0,0,64,253,1,0,0,0,66,255,1,0,0,0,68,
		257,1,0,0,0,70,259,1,0,0,0,72,261,1,0,0,0,74,263,1,0,0,0,76,77,5,1,0,0,
		77,78,5,30,0,0,78,82,5,28,0,0,79,81,3,2,1,0,80,79,1,0,0,0,81,84,1,0,0,
		0,82,80,1,0,0,0,82,83,1,0,0,0,83,85,1,0,0,0,84,82,1,0,0,0,85,86,5,29,0,
		0,86,1,1,0,0,0,87,90,3,4,2,0,88,90,3,6,3,0,89,87,1,0,0,0,89,88,1,0,0,0,
		90,3,1,0,0,0,91,92,5,2,0,0,92,96,5,28,0,0,93,95,3,22,11,0,94,93,1,0,0,
		0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,99,1,0,0,0,98,96,1,0,0,
		0,99,100,5,29,0,0,100,5,1,0,0,0,101,102,5,3,0,0,102,106,5,28,0,0,103,105,
		3,8,4,0,104,103,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,
		0,107,109,1,0,0,0,108,106,1,0,0,0,109,110,5,29,0,0,110,7,1,0,0,0,111,121,
		3,24,12,0,112,121,3,26,13,0,113,121,3,28,14,0,114,121,3,30,15,0,115,121,
		3,32,16,0,116,121,3,34,17,0,117,121,3,36,18,0,118,121,3,38,19,0,119,121,
		3,64,32,0,120,111,1,0,0,0,120,112,1,0,0,0,120,113,1,0,0,0,120,114,1,0,
		0,0,120,115,1,0,0,0,120,116,1,0,0,0,120,117,1,0,0,0,120,118,1,0,0,0,120,
		119,1,0,0,0,121,9,1,0,0,0,122,123,5,31,0,0,123,11,1,0,0,0,124,125,7,0,
		0,0,125,13,1,0,0,0,126,127,5,4,0,0,127,128,3,12,6,0,128,129,5,5,0,0,129,
		130,3,12,6,0,130,131,5,5,0,0,131,132,3,12,6,0,132,133,5,5,0,0,133,134,
		3,12,6,0,134,135,5,6,0,0,135,15,1,0,0,0,136,137,5,30,0,0,137,138,5,28,
		0,0,138,139,5,29,0,0,139,17,1,0,0,0,140,144,3,12,6,0,141,144,3,14,7,0,
		142,144,3,16,8,0,143,140,1,0,0,0,143,141,1,0,0,0,143,142,1,0,0,0,144,19,
		1,0,0,0,145,146,7,1,0,0,146,21,1,0,0,0,147,149,3,10,5,0,148,147,1,0,0,
		0,149,152,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,153,1,0,0,0,152,
		150,1,0,0,0,153,154,5,74,0,0,154,155,5,4,0,0,155,156,5,30,0,0,156,157,
		5,5,0,0,157,158,3,20,10,0,158,159,5,6,0,0,159,160,5,27,0,0,160,161,3,18,
		9,0,161,23,1,0,0,0,162,163,5,7,0,0,163,164,5,30,0,0,164,25,1,0,0,0,165,
		166,5,8,0,0,166,167,3,66,33,0,167,27,1,0,0,0,168,171,5,9,0,0,169,172,5,
		40,0,0,170,172,3,72,36,0,171,169,1,0,0,0,171,170,1,0,0,0,172,29,1,0,0,
		0,173,174,5,10,0,0,174,175,7,2,0,0,175,31,1,0,0,0,176,177,5,11,0,0,177,
		185,5,32,0,0,178,186,5,40,0,0,179,180,3,68,34,0,180,181,3,68,34,0,181,
		182,5,5,0,0,182,183,3,68,34,0,183,184,3,68,34,0,184,186,1,0,0,0,185,178,
		1,0,0,0,185,179,1,0,0,0,186,33,1,0,0,0,187,188,5,12,0,0,188,189,5,32,0,
		0,189,190,3,70,35,0,190,191,5,5,0,0,191,192,3,70,35,0,192,35,1,0,0,0,193,
		194,5,13,0,0,194,195,5,32,0,0,195,196,7,3,0,0,196,37,1,0,0,0,197,198,5,
		14,0,0,198,202,5,28,0,0,199,201,3,40,20,0,200,199,1,0,0,0,201,204,1,0,
		0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,205,1,0,0,0,204,202,1,0,0,0,205,
		206,5,29,0,0,206,39,1,0,0,0,207,219,3,42,21,0,208,219,3,44,22,0,209,219,
		3,46,23,0,210,219,3,48,24,0,211,219,3,50,25,0,212,219,3,52,26,0,213,219,
		3,54,27,0,214,219,3,56,28,0,215,219,3,58,29,0,216,219,3,60,30,0,217,219,
		3,62,31,0,218,207,1,0,0,0,218,208,1,0,0,0,218,209,1,0,0,0,218,210,1,0,
		0,0,218,211,1,0,0,0,218,212,1,0,0,0,218,213,1,0,0,0,218,214,1,0,0,0,218,
		215,1,0,0,0,218,216,1,0,0,0,218,217,1,0,0,0,219,41,1,0,0,0,220,221,5,15,
		0,0,221,222,5,32,0,0,222,43,1,0,0,0,223,224,5,16,0,0,224,225,5,32,0,0,
		225,45,1,0,0,0,226,227,5,17,0,0,227,228,5,32,0,0,228,47,1,0,0,0,229,230,
		5,18,0,0,230,231,3,72,36,0,231,49,1,0,0,0,232,233,5,19,0,0,233,234,3,74,
		37,0,234,51,1,0,0,0,235,236,5,20,0,0,236,237,3,74,37,0,237,53,1,0,0,0,
		238,239,5,21,0,0,239,240,3,74,37,0,240,55,1,0,0,0,241,242,5,22,0,0,242,
		243,3,72,36,0,243,57,1,0,0,0,244,245,5,23,0,0,245,246,3,74,37,0,246,59,
		1,0,0,0,247,248,5,24,0,0,248,249,3,74,37,0,249,61,1,0,0,0,250,251,5,25,
		0,0,251,252,3,74,37,0,252,63,1,0,0,0,253,254,5,26,0,0,254,65,1,0,0,0,255,
		256,7,4,0,0,256,67,1,0,0,0,257,258,7,5,0,0,258,69,1,0,0,0,259,260,7,6,
		0,0,260,71,1,0,0,0,261,262,7,7,0,0,262,73,1,0,0,0,263,264,7,8,0,0,264,
		75,1,0,0,0,11,82,89,96,106,120,143,150,171,185,202,218
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DX12Demo.Editor.ShaderLab.Internal
