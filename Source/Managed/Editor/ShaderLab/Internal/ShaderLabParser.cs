//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ShaderLab.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace March.Editor.ShaderLab.Internal {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class ShaderLabParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, HlslInclude=30, HlslProgram=31, 
		Assign=32, LeftBrace=33, RightBrace=34, StringLiteral=35, BracketLiteral=36, 
		IntegerLiteral=37, FloatLiteral=38, Float=39, Int=40, Color=41, Vector=42, 
		Texture=43, On=44, Off=45, Disabled=46, Front=47, Back=48, Zero=49, One=50, 
		SrcColor=51, OneMinusSrcColor=52, SrcAlpha=53, OneMinusSrcAlpha=54, DstAlpha=55, 
		OneMinusDstAlpha=56, DstColor=57, OneMinusDstColor=58, SrcAlphaSaturate=59, 
		Add=60, Sub=61, RevSub=62, Min=63, Max=64, Never=65, Less=66, Equal=67, 
		LEqual=68, Greater=69, NotEqual=70, GEqual=71, Always=72, Keep=73, Replace=74, 
		IncrSat=75, DecrSat=76, Invert=77, IncrWrap=78, DecrWrap=79, Identifier=80, 
		Whitespace=81, Newline=82, BlockComment=83, LineComment=84;
	public const int
		RULE_shader = 0, RULE_shaderDeclaration = 1, RULE_propertiesBlock = 2, 
		RULE_passBlock = 3, RULE_passDeclaration = 4, RULE_attributeDeclaration = 5, 
		RULE_numberLiteralExpression = 6, RULE_vectorLiteralExpression = 7, RULE_textureLiteralExpression = 8, 
		RULE_propertyDefaultValueExpression = 9, RULE_propertyTypeDeclaration = 10, 
		RULE_propertyDeclaration = 11, RULE_nameDeclaration = 12, RULE_renderStateDeclaration = 13, 
		RULE_tagsBlock = 14, RULE_tagDeclaration = 15, RULE_cullDeclaration = 16, 
		RULE_zTestDeclaration = 17, RULE_zWriteDeclaration = 18, RULE_blendDeclaration = 19, 
		RULE_blendOpDeclaration = 20, RULE_colorMaskDeclaration = 21, RULE_stencilBlock = 22, 
		RULE_stencilDeclaration = 23, RULE_stencilRefDeclaration = 24, RULE_stencilReadMaskDeclaration = 25, 
		RULE_stencilWriteMaskDeclaration = 26, RULE_stencilCompDeclaration = 27, 
		RULE_stencilPassDeclaration = 28, RULE_stencilFailDeclaration = 29, RULE_stencilZFailDeclaration = 30, 
		RULE_stencilCompFrontDeclaration = 31, RULE_stencilPassFrontDeclaration = 32, 
		RULE_stencilFailFrontDeclaration = 33, RULE_stencilZFailFrontDeclaration = 34, 
		RULE_stencilCompBackDeclaration = 35, RULE_stencilPassBackDeclaration = 36, 
		RULE_stencilFailBackDeclaration = 37, RULE_stencilZFailBackDeclaration = 38, 
		RULE_hlslIncludeDeclaration = 39, RULE_hlslProgramDeclaration = 40, RULE_cullModeValue = 41, 
		RULE_blendFactorValue = 42, RULE_blendOpValue = 43, RULE_compareFuncValue = 44, 
		RULE_stencilOpValue = 45;
	public static readonly string[] ruleNames = {
		"shader", "shaderDeclaration", "propertiesBlock", "passBlock", "passDeclaration", 
		"attributeDeclaration", "numberLiteralExpression", "vectorLiteralExpression", 
		"textureLiteralExpression", "propertyDefaultValueExpression", "propertyTypeDeclaration", 
		"propertyDeclaration", "nameDeclaration", "renderStateDeclaration", "tagsBlock", 
		"tagDeclaration", "cullDeclaration", "zTestDeclaration", "zWriteDeclaration", 
		"blendDeclaration", "blendOpDeclaration", "colorMaskDeclaration", "stencilBlock", 
		"stencilDeclaration", "stencilRefDeclaration", "stencilReadMaskDeclaration", 
		"stencilWriteMaskDeclaration", "stencilCompDeclaration", "stencilPassDeclaration", 
		"stencilFailDeclaration", "stencilZFailDeclaration", "stencilCompFrontDeclaration", 
		"stencilPassFrontDeclaration", "stencilFailFrontDeclaration", "stencilZFailFrontDeclaration", 
		"stencilCompBackDeclaration", "stencilPassBackDeclaration", "stencilFailBackDeclaration", 
		"stencilZFailBackDeclaration", "hlslIncludeDeclaration", "hlslProgramDeclaration", 
		"cullModeValue", "blendFactorValue", "blendOpValue", "compareFuncValue", 
		"stencilOpValue"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Shader'", "'Properties'", "'Pass'", "'('", "','", "')'", "'Name'", 
		"'Tags'", "'Cull'", "'ZTest'", "'ZWrite'", "'Blend'", "'BlendOp'", "'ColorMask'", 
		"'Stencil'", "'Ref'", "'ReadMask'", "'WriteMask'", "'Comp'", "'Fail'", 
		"'ZFail'", "'CompFront'", "'PassFront'", "'FailFront'", "'ZFailFront'", 
		"'CompBack'", "'PassBack'", "'FailBack'", "'ZFailBack'", null, null, "'='", 
		"'{'", "'}'", null, null, null, null, "'Float'", "'Int'", "'Color'", "'Vector'", 
		"'2D'", "'On'", "'Off'", "'Disabled'", "'Front'", "'Back'", "'Zero'", 
		"'One'", "'SrcColor'", "'OneMinusSrcColor'", "'SrcAlpha'", "'OneMinusSrcAlpha'", 
		"'DstAlpha'", "'OneMinusDstAlpha'", "'DstColor'", "'OneMinusDstColor'", 
		"'SrcAlphaSaturate'", "'Add'", "'Sub'", "'RevSub'", "'Min'", "'Max'", 
		"'Never'", "'Less'", "'Equal'", "'LEqual'", "'Greater'", "'NotEqual'", 
		"'GEqual'", "'Always'", "'Keep'", "'Replace'", "'IncrSat'", "'DecrSat'", 
		"'Invert'", "'IncrWrap'", "'DecrWrap'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "HlslInclude", "HlslProgram", "Assign", 
		"LeftBrace", "RightBrace", "StringLiteral", "BracketLiteral", "IntegerLiteral", 
		"FloatLiteral", "Float", "Int", "Color", "Vector", "Texture", "On", "Off", 
		"Disabled", "Front", "Back", "Zero", "One", "SrcColor", "OneMinusSrcColor", 
		"SrcAlpha", "OneMinusSrcAlpha", "DstAlpha", "OneMinusDstAlpha", "DstColor", 
		"OneMinusDstColor", "SrcAlphaSaturate", "Add", "Sub", "RevSub", "Min", 
		"Max", "Never", "Less", "Equal", "LEqual", "Greater", "NotEqual", "GEqual", 
		"Always", "Keep", "Replace", "IncrSat", "DecrSat", "Invert", "IncrWrap", 
		"DecrWrap", "Identifier", "Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ShaderLab.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ShaderLabParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ShaderLabParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ShaderLabParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ShaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(ShaderLabParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ShaderLabParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ShaderLabParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShaderDeclarationContext[] shaderDeclaration() {
			return GetRuleContexts<ShaderDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderDeclarationContext shaderDeclaration(int i) {
			return GetRuleContext<ShaderDeclarationContext>(i);
		}
		public ShaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderContext shader() {
		ShaderContext _localctx = new ShaderContext(Context, State);
		EnterRule(_localctx, 0, RULE_shader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(T__0);
			State = 93;
			Match(StringLiteral);
			State = 94;
			Match(LeftBrace);
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1073807116L) != 0)) {
				{
				{
				State = 95;
				shaderDeclaration();
				}
				}
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 101;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertiesBlockContext propertiesBlock() {
			return GetRuleContext<PropertiesBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsBlockContext tagsBlock() {
			return GetRuleContext<TagsBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenderStateDeclarationContext renderStateDeclaration() {
			return GetRuleContext<RenderStateDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HlslIncludeDeclarationContext hlslIncludeDeclaration() {
			return GetRuleContext<HlslIncludeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PassBlockContext passBlock() {
			return GetRuleContext<PassBlockContext>(0);
		}
		public ShaderDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderDeclarationContext shaderDeclaration() {
		ShaderDeclarationContext _localctx = new ShaderDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_shaderDeclaration);
		try {
			State = 108;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 103;
				propertiesBlock();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 104;
				tagsBlock();
				}
				break;
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
				EnterOuterAlt(_localctx, 3);
				{
				State = 105;
				renderStateDeclaration();
				}
				break;
			case HlslInclude:
				EnterOuterAlt(_localctx, 4);
				{
				State = 106;
				hlslIncludeDeclaration();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 5);
				{
				State = 107;
				passBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertiesBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ShaderLabParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ShaderLabParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDeclarationContext[] propertyDeclaration() {
			return GetRuleContexts<PropertyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDeclarationContext propertyDeclaration(int i) {
			return GetRuleContext<PropertyDeclarationContext>(i);
		}
		public PropertiesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertiesBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertiesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertiesBlockContext propertiesBlock() {
		PropertiesBlockContext _localctx = new PropertiesBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_propertiesBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(T__1);
			State = 111;
			Match(LeftBrace);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BracketLiteral || _la==Identifier) {
				{
				{
				State = 112;
				propertyDeclaration();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 118;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PassBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ShaderLabParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ShaderLabParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PassDeclarationContext[] passDeclaration() {
			return GetRuleContexts<PassDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PassDeclarationContext passDeclaration(int i) {
			return GetRuleContext<PassDeclarationContext>(i);
		}
		public PassBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_passBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PassBlockContext passBlock() {
		PassBlockContext _localctx = new PassBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_passBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(T__2);
			State = 121;
			Match(LeftBrace);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2147549056L) != 0)) {
				{
				{
				State = 122;
				passDeclaration();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 128;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameDeclarationContext nameDeclaration() {
			return GetRuleContext<NameDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagsBlockContext tagsBlock() {
			return GetRuleContext<TagsBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenderStateDeclarationContext renderStateDeclaration() {
			return GetRuleContext<RenderStateDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HlslProgramDeclarationContext hlslProgramDeclaration() {
			return GetRuleContext<HlslProgramDeclarationContext>(0);
		}
		public PassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_passDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PassDeclarationContext passDeclaration() {
		PassDeclarationContext _localctx = new PassDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_passDeclaration);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130;
				nameDeclaration();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131;
				tagsBlock();
				}
				break;
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
				EnterOuterAlt(_localctx, 3);
				{
				State = 132;
				renderStateDeclaration();
				}
				break;
			case HlslProgram:
				EnterOuterAlt(_localctx, 4);
				{
				State = 133;
				hlslProgramDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BracketLiteral() { return GetToken(ShaderLabParser.BracketLiteral, 0); }
		public AttributeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeDeclarationContext attributeDeclaration() {
		AttributeDeclarationContext _localctx = new AttributeDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_attributeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(BracketLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(ShaderLabParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatLiteral() { return GetToken(ShaderLabParser.FloatLiteral, 0); }
		public NumberLiteralExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteralExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralExpressionContext numberLiteralExpression() {
		NumberLiteralExpressionContext _localctx = new NumberLiteralExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_numberLiteralExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			_la = TokenStream.LA(1);
			if ( !(_la==IntegerLiteral || _la==FloatLiteral) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorLiteralExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralExpressionContext[] numberLiteralExpression() {
			return GetRuleContexts<NumberLiteralExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralExpressionContext numberLiteralExpression(int i) {
			return GetRuleContext<NumberLiteralExpressionContext>(i);
		}
		public VectorLiteralExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorLiteralExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectorLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorLiteralExpressionContext vectorLiteralExpression() {
		VectorLiteralExpressionContext _localctx = new VectorLiteralExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_vectorLiteralExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(T__3);
			State = 141;
			numberLiteralExpression();
			State = 142;
			Match(T__4);
			State = 143;
			numberLiteralExpression();
			State = 144;
			Match(T__4);
			State = 145;
			numberLiteralExpression();
			State = 146;
			Match(T__4);
			State = 147;
			numberLiteralExpression();
			State = 148;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextureLiteralExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(ShaderLabParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ShaderLabParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ShaderLabParser.RightBrace, 0); }
		public TextureLiteralExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textureLiteralExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextureLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextureLiteralExpressionContext textureLiteralExpression() {
		TextureLiteralExpressionContext _localctx = new TextureLiteralExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_textureLiteralExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(StringLiteral);
			State = 151;
			Match(LeftBrace);
			State = 152;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDefaultValueExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralExpressionContext numberLiteralExpression() {
			return GetRuleContext<NumberLiteralExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VectorLiteralExpressionContext vectorLiteralExpression() {
			return GetRuleContext<VectorLiteralExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextureLiteralExpressionContext textureLiteralExpression() {
			return GetRuleContext<TextureLiteralExpressionContext>(0);
		}
		public PropertyDefaultValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDefaultValueExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDefaultValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDefaultValueExpressionContext propertyDefaultValueExpression() {
		PropertyDefaultValueExpressionContext _localctx = new PropertyDefaultValueExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_propertyDefaultValueExpression);
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
			case FloatLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154;
				numberLiteralExpression();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 155;
				vectorLiteralExpression();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 156;
				textureLiteralExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(ShaderLabParser.Float, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(ShaderLabParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Color() { return GetToken(ShaderLabParser.Color, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Vector() { return GetToken(ShaderLabParser.Vector, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Texture() { return GetToken(ShaderLabParser.Texture, 0); }
		public PropertyTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyTypeDeclarationContext propertyTypeDeclaration() {
		PropertyTypeDeclarationContext _localctx = new PropertyTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_propertyTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17042430230528L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ShaderLabParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(ShaderLabParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyTypeDeclarationContext propertyTypeDeclaration() {
			return GetRuleContext<PropertyTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(ShaderLabParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDefaultValueExpressionContext propertyDefaultValueExpression() {
			return GetRuleContext<PropertyDefaultValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext[] attributeDeclaration() {
			return GetRuleContexts<AttributeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeDeclarationContext attributeDeclaration(int i) {
			return GetRuleContext<AttributeDeclarationContext>(i);
		}
		public PropertyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDeclarationContext propertyDeclaration() {
		PropertyDeclarationContext _localctx = new PropertyDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_propertyDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BracketLiteral) {
				{
				{
				State = 161;
				attributeDeclaration();
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 167;
			Match(Identifier);
			State = 168;
			Match(T__3);
			State = 169;
			Match(StringLiteral);
			State = 170;
			Match(T__4);
			State = 171;
			propertyTypeDeclaration();
			State = 172;
			Match(T__5);
			State = 173;
			Match(Assign);
			State = 174;
			propertyDefaultValueExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(ShaderLabParser.StringLiteral, 0); }
		public NameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameDeclarationContext nameDeclaration() {
		NameDeclarationContext _localctx = new NameDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_nameDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(T__6);
			State = 177;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenderStateDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CullDeclarationContext cullDeclaration() {
			return GetRuleContext<CullDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ZTestDeclarationContext zTestDeclaration() {
			return GetRuleContext<ZTestDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ZWriteDeclarationContext zWriteDeclaration() {
			return GetRuleContext<ZWriteDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlendDeclarationContext blendDeclaration() {
			return GetRuleContext<BlendDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlendOpDeclarationContext blendOpDeclaration() {
			return GetRuleContext<BlendOpDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColorMaskDeclarationContext colorMaskDeclaration() {
			return GetRuleContext<ColorMaskDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilBlockContext stencilBlock() {
			return GetRuleContext<StencilBlockContext>(0);
		}
		public RenderStateDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renderStateDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenderStateDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenderStateDeclarationContext renderStateDeclaration() {
		RenderStateDeclarationContext _localctx = new RenderStateDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_renderStateDeclaration);
		try {
			State = 186;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 179;
				cullDeclaration();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180;
				zTestDeclaration();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 3);
				{
				State = 181;
				zWriteDeclaration();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 4);
				{
				State = 182;
				blendDeclaration();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 5);
				{
				State = 183;
				blendOpDeclaration();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 6);
				{
				State = 184;
				colorMaskDeclaration();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 7);
				{
				State = 185;
				stencilBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagsBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ShaderLabParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ShaderLabParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagDeclarationContext[] tagDeclaration() {
			return GetRuleContexts<TagDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagDeclarationContext tagDeclaration(int i) {
			return GetRuleContext<TagDeclarationContext>(i);
		}
		public TagsBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagsBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagsBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagsBlockContext tagsBlock() {
		TagsBlockContext _localctx = new TagsBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_tagsBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(T__7);
			State = 189;
			Match(LeftBrace);
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==StringLiteral) {
				{
				{
				State = 190;
				tagDeclaration();
				}
				}
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 196;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(ShaderLabParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(ShaderLabParser.StringLiteral, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(ShaderLabParser.Assign, 0); }
		public TagDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagDeclarationContext tagDeclaration() {
		TagDeclarationContext _localctx = new TagDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_tagDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(StringLiteral);
			State = 199;
			Match(Assign);
			State = 200;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CullDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CullModeValueContext cullModeValue() {
			return GetRuleContext<CullModeValueContext>(0);
		}
		public CullDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cullDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCullDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CullDeclarationContext cullDeclaration() {
		CullDeclarationContext _localctx = new CullDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_cullDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(T__8);
			State = 203;
			cullModeValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZTestDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Disabled() { return GetToken(ShaderLabParser.Disabled, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompareFuncValueContext compareFuncValue() {
			return GetRuleContext<CompareFuncValueContext>(0);
		}
		public ZTestDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zTestDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZTestDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZTestDeclarationContext zTestDeclaration() {
		ZTestDeclarationContext _localctx = new ZTestDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_zTestDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(T__9);
			State = 208;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Disabled:
				{
				State = 206;
				Match(Disabled);
				}
				break;
			case Never:
			case Less:
			case Equal:
			case LEqual:
			case Greater:
			case NotEqual:
			case GEqual:
			case Always:
				{
				State = 207;
				compareFuncValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZWriteDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Off() { return GetToken(ShaderLabParser.Off, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode On() { return GetToken(ShaderLabParser.On, 0); }
		public ZWriteDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zWriteDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZWriteDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZWriteDeclarationContext zWriteDeclaration() {
		ZWriteDeclarationContext _localctx = new ZWriteDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_zWriteDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(T__10);
			State = 211;
			_la = TokenStream.LA(1);
			if ( !(_la==On || _la==Off) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlendDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Off() { return GetToken(ShaderLabParser.Off, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(ShaderLabParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlendFactorValueContext[] blendFactorValue() {
			return GetRuleContexts<BlendFactorValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlendFactorValueContext blendFactorValue(int i) {
			return GetRuleContext<BlendFactorValueContext>(i);
		}
		public BlendDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blendDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlendDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlendDeclarationContext blendDeclaration() {
		BlendDeclarationContext _localctx = new BlendDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_blendDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(T__11);
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IntegerLiteral) {
				{
				State = 214;
				Match(IntegerLiteral);
				}
			}

			State = 226;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Off:
				{
				State = 217;
				Match(Off);
				}
				break;
			case Zero:
			case One:
			case SrcColor:
			case OneMinusSrcColor:
			case SrcAlpha:
			case OneMinusSrcAlpha:
			case DstAlpha:
			case OneMinusDstAlpha:
			case DstColor:
			case OneMinusDstColor:
			case SrcAlphaSaturate:
				{
				{
				State = 218;
				blendFactorValue();
				State = 219;
				blendFactorValue();
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 220;
					Match(T__4);
					State = 221;
					blendFactorValue();
					State = 222;
					blendFactorValue();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlendOpDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlendOpValueContext[] blendOpValue() {
			return GetRuleContexts<BlendOpValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlendOpValueContext blendOpValue(int i) {
			return GetRuleContext<BlendOpValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(ShaderLabParser.IntegerLiteral, 0); }
		public BlendOpDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blendOpDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlendOpDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlendOpDeclarationContext blendOpDeclaration() {
		BlendOpDeclarationContext _localctx = new BlendOpDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_blendOpDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(T__12);
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IntegerLiteral) {
				{
				State = 229;
				Match(IntegerLiteral);
				}
			}

			State = 232;
			blendOpValue();
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 233;
				Match(T__4);
				State = 234;
				blendOpValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColorMaskDeclarationContext : ParserRuleContext {
		public ColorMaskDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colorMaskDeclaration; } }
	 
		public ColorMaskDeclarationContext() { }
		public virtual void CopyFrom(ColorMaskDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ColorMaskInt1DeclarationContext : ColorMaskDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(ShaderLabParser.IntegerLiteral, 0); }
		public ColorMaskInt1DeclarationContext(ColorMaskDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColorMaskInt1Declaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ColorMaskIdentifierDeclarationContext : ColorMaskDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ShaderLabParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(ShaderLabParser.IntegerLiteral, 0); }
		public ColorMaskIdentifierDeclarationContext(ColorMaskDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColorMaskIdentifierDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ColorMaskInt2DeclarationContext : ColorMaskDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IntegerLiteral() { return GetTokens(ShaderLabParser.IntegerLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral(int i) {
			return GetToken(ShaderLabParser.IntegerLiteral, i);
		}
		public ColorMaskInt2DeclarationContext(ColorMaskDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColorMaskInt2Declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColorMaskDeclarationContext colorMaskDeclaration() {
		ColorMaskDeclarationContext _localctx = new ColorMaskDeclarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_colorMaskDeclaration);
		int _la;
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new ColorMaskInt1DeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 237;
				Match(T__13);
				State = 238;
				Match(IntegerLiteral);
				}
				break;
			case 2:
				_localctx = new ColorMaskInt2DeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 239;
				Match(T__13);
				State = 240;
				Match(IntegerLiteral);
				State = 241;
				Match(IntegerLiteral);
				}
				break;
			case 3:
				_localctx = new ColorMaskIdentifierDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 242;
				Match(T__13);
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IntegerLiteral) {
					{
					State = 243;
					Match(IntegerLiteral);
					}
				}

				State = 246;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ShaderLabParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ShaderLabParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StencilDeclarationContext[] stencilDeclaration() {
			return GetRuleContexts<StencilDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilDeclarationContext stencilDeclaration(int i) {
			return GetRuleContext<StencilDeclarationContext>(i);
		}
		public StencilBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilBlockContext stencilBlock() {
		StencilBlockContext _localctx = new StencilBlockContext(Context, State);
		EnterRule(_localctx, 44, RULE_stencilBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(T__14);
			State = 250;
			Match(LeftBrace);
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1073676296L) != 0)) {
				{
				{
				State = 251;
				stencilDeclaration();
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 257;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StencilRefDeclarationContext stencilRefDeclaration() {
			return GetRuleContext<StencilRefDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilReadMaskDeclarationContext stencilReadMaskDeclaration() {
			return GetRuleContext<StencilReadMaskDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilWriteMaskDeclarationContext stencilWriteMaskDeclaration() {
			return GetRuleContext<StencilWriteMaskDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilCompDeclarationContext stencilCompDeclaration() {
			return GetRuleContext<StencilCompDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilPassDeclarationContext stencilPassDeclaration() {
			return GetRuleContext<StencilPassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilFailDeclarationContext stencilFailDeclaration() {
			return GetRuleContext<StencilFailDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilZFailDeclarationContext stencilZFailDeclaration() {
			return GetRuleContext<StencilZFailDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilCompFrontDeclarationContext stencilCompFrontDeclaration() {
			return GetRuleContext<StencilCompFrontDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilPassFrontDeclarationContext stencilPassFrontDeclaration() {
			return GetRuleContext<StencilPassFrontDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilFailFrontDeclarationContext stencilFailFrontDeclaration() {
			return GetRuleContext<StencilFailFrontDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilZFailFrontDeclarationContext stencilZFailFrontDeclaration() {
			return GetRuleContext<StencilZFailFrontDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilCompBackDeclarationContext stencilCompBackDeclaration() {
			return GetRuleContext<StencilCompBackDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilPassBackDeclarationContext stencilPassBackDeclaration() {
			return GetRuleContext<StencilPassBackDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilFailBackDeclarationContext stencilFailBackDeclaration() {
			return GetRuleContext<StencilFailBackDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StencilZFailBackDeclarationContext stencilZFailBackDeclaration() {
			return GetRuleContext<StencilZFailBackDeclarationContext>(0);
		}
		public StencilDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilDeclarationContext stencilDeclaration() {
		StencilDeclarationContext _localctx = new StencilDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_stencilDeclaration);
		try {
			State = 274;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 259;
				stencilRefDeclaration();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 260;
				stencilReadMaskDeclaration();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 3);
				{
				State = 261;
				stencilWriteMaskDeclaration();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 4);
				{
				State = 262;
				stencilCompDeclaration();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 5);
				{
				State = 263;
				stencilPassDeclaration();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 6);
				{
				State = 264;
				stencilFailDeclaration();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 7);
				{
				State = 265;
				stencilZFailDeclaration();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 8);
				{
				State = 266;
				stencilCompFrontDeclaration();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 9);
				{
				State = 267;
				stencilPassFrontDeclaration();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 10);
				{
				State = 268;
				stencilFailFrontDeclaration();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 11);
				{
				State = 269;
				stencilZFailFrontDeclaration();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 12);
				{
				State = 270;
				stencilCompBackDeclaration();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 13);
				{
				State = 271;
				stencilPassBackDeclaration();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 14);
				{
				State = 272;
				stencilFailBackDeclaration();
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 15);
				{
				State = 273;
				stencilZFailBackDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilRefDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(ShaderLabParser.IntegerLiteral, 0); }
		public StencilRefDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilRefDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilRefDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilRefDeclarationContext stencilRefDeclaration() {
		StencilRefDeclarationContext _localctx = new StencilRefDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_stencilRefDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(T__15);
			State = 277;
			Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilReadMaskDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(ShaderLabParser.IntegerLiteral, 0); }
		public StencilReadMaskDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilReadMaskDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilReadMaskDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilReadMaskDeclarationContext stencilReadMaskDeclaration() {
		StencilReadMaskDeclarationContext _localctx = new StencilReadMaskDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_stencilReadMaskDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(T__16);
			State = 280;
			Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilWriteMaskDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(ShaderLabParser.IntegerLiteral, 0); }
		public StencilWriteMaskDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilWriteMaskDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilWriteMaskDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilWriteMaskDeclarationContext stencilWriteMaskDeclaration() {
		StencilWriteMaskDeclarationContext _localctx = new StencilWriteMaskDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_stencilWriteMaskDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			Match(T__17);
			State = 283;
			Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilCompDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareFuncValueContext compareFuncValue() {
			return GetRuleContext<CompareFuncValueContext>(0);
		}
		public StencilCompDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilCompDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilCompDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilCompDeclarationContext stencilCompDeclaration() {
		StencilCompDeclarationContext _localctx = new StencilCompDeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_stencilCompDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(T__18);
			State = 286;
			compareFuncValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilPassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StencilOpValueContext stencilOpValue() {
			return GetRuleContext<StencilOpValueContext>(0);
		}
		public StencilPassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilPassDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilPassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilPassDeclarationContext stencilPassDeclaration() {
		StencilPassDeclarationContext _localctx = new StencilPassDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_stencilPassDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(T__2);
			State = 289;
			stencilOpValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilFailDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StencilOpValueContext stencilOpValue() {
			return GetRuleContext<StencilOpValueContext>(0);
		}
		public StencilFailDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilFailDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilFailDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilFailDeclarationContext stencilFailDeclaration() {
		StencilFailDeclarationContext _localctx = new StencilFailDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_stencilFailDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(T__19);
			State = 292;
			stencilOpValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilZFailDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StencilOpValueContext stencilOpValue() {
			return GetRuleContext<StencilOpValueContext>(0);
		}
		public StencilZFailDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilZFailDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilZFailDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilZFailDeclarationContext stencilZFailDeclaration() {
		StencilZFailDeclarationContext _localctx = new StencilZFailDeclarationContext(Context, State);
		EnterRule(_localctx, 60, RULE_stencilZFailDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			Match(T__20);
			State = 295;
			stencilOpValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilCompFrontDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareFuncValueContext compareFuncValue() {
			return GetRuleContext<CompareFuncValueContext>(0);
		}
		public StencilCompFrontDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilCompFrontDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilCompFrontDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilCompFrontDeclarationContext stencilCompFrontDeclaration() {
		StencilCompFrontDeclarationContext _localctx = new StencilCompFrontDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_stencilCompFrontDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(T__21);
			State = 298;
			compareFuncValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilPassFrontDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StencilOpValueContext stencilOpValue() {
			return GetRuleContext<StencilOpValueContext>(0);
		}
		public StencilPassFrontDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilPassFrontDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilPassFrontDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilPassFrontDeclarationContext stencilPassFrontDeclaration() {
		StencilPassFrontDeclarationContext _localctx = new StencilPassFrontDeclarationContext(Context, State);
		EnterRule(_localctx, 64, RULE_stencilPassFrontDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(T__22);
			State = 301;
			stencilOpValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilFailFrontDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StencilOpValueContext stencilOpValue() {
			return GetRuleContext<StencilOpValueContext>(0);
		}
		public StencilFailFrontDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilFailFrontDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilFailFrontDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilFailFrontDeclarationContext stencilFailFrontDeclaration() {
		StencilFailFrontDeclarationContext _localctx = new StencilFailFrontDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_stencilFailFrontDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(T__23);
			State = 304;
			stencilOpValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilZFailFrontDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StencilOpValueContext stencilOpValue() {
			return GetRuleContext<StencilOpValueContext>(0);
		}
		public StencilZFailFrontDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilZFailFrontDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilZFailFrontDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilZFailFrontDeclarationContext stencilZFailFrontDeclaration() {
		StencilZFailFrontDeclarationContext _localctx = new StencilZFailFrontDeclarationContext(Context, State);
		EnterRule(_localctx, 68, RULE_stencilZFailFrontDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(T__24);
			State = 307;
			stencilOpValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilCompBackDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareFuncValueContext compareFuncValue() {
			return GetRuleContext<CompareFuncValueContext>(0);
		}
		public StencilCompBackDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilCompBackDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilCompBackDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilCompBackDeclarationContext stencilCompBackDeclaration() {
		StencilCompBackDeclarationContext _localctx = new StencilCompBackDeclarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_stencilCompBackDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(T__25);
			State = 310;
			compareFuncValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilPassBackDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StencilOpValueContext stencilOpValue() {
			return GetRuleContext<StencilOpValueContext>(0);
		}
		public StencilPassBackDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilPassBackDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilPassBackDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilPassBackDeclarationContext stencilPassBackDeclaration() {
		StencilPassBackDeclarationContext _localctx = new StencilPassBackDeclarationContext(Context, State);
		EnterRule(_localctx, 72, RULE_stencilPassBackDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(T__26);
			State = 313;
			stencilOpValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilFailBackDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StencilOpValueContext stencilOpValue() {
			return GetRuleContext<StencilOpValueContext>(0);
		}
		public StencilFailBackDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilFailBackDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilFailBackDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilFailBackDeclarationContext stencilFailBackDeclaration() {
		StencilFailBackDeclarationContext _localctx = new StencilFailBackDeclarationContext(Context, State);
		EnterRule(_localctx, 74, RULE_stencilFailBackDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(T__27);
			State = 316;
			stencilOpValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilZFailBackDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StencilOpValueContext stencilOpValue() {
			return GetRuleContext<StencilOpValueContext>(0);
		}
		public StencilZFailBackDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilZFailBackDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilZFailBackDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilZFailBackDeclarationContext stencilZFailBackDeclaration() {
		StencilZFailBackDeclarationContext _localctx = new StencilZFailBackDeclarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_stencilZFailBackDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			Match(T__28);
			State = 319;
			stencilOpValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HlslIncludeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HlslInclude() { return GetToken(ShaderLabParser.HlslInclude, 0); }
		public HlslIncludeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hlslIncludeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHlslIncludeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HlslIncludeDeclarationContext hlslIncludeDeclaration() {
		HlslIncludeDeclarationContext _localctx = new HlslIncludeDeclarationContext(Context, State);
		EnterRule(_localctx, 78, RULE_hlslIncludeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			Match(HlslInclude);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HlslProgramDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HlslProgram() { return GetToken(ShaderLabParser.HlslProgram, 0); }
		public HlslProgramDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hlslProgramDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHlslProgramDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HlslProgramDeclarationContext hlslProgramDeclaration() {
		HlslProgramDeclarationContext _localctx = new HlslProgramDeclarationContext(Context, State);
		EnterRule(_localctx, 80, RULE_hlslProgramDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			Match(HlslProgram);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CullModeValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Off() { return GetToken(ShaderLabParser.Off, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Front() { return GetToken(ShaderLabParser.Front, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Back() { return GetToken(ShaderLabParser.Back, 0); }
		public CullModeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cullModeValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCullModeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CullModeValueContext cullModeValue() {
		CullModeValueContext _localctx = new CullModeValueContext(Context, State);
		EnterRule(_localctx, 82, RULE_cullModeValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 457396837154816L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlendFactorValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Zero() { return GetToken(ShaderLabParser.Zero, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode One() { return GetToken(ShaderLabParser.One, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SrcColor() { return GetToken(ShaderLabParser.SrcColor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OneMinusSrcColor() { return GetToken(ShaderLabParser.OneMinusSrcColor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SrcAlpha() { return GetToken(ShaderLabParser.SrcAlpha, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OneMinusSrcAlpha() { return GetToken(ShaderLabParser.OneMinusSrcAlpha, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DstAlpha() { return GetToken(ShaderLabParser.DstAlpha, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OneMinusDstAlpha() { return GetToken(ShaderLabParser.OneMinusDstAlpha, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DstColor() { return GetToken(ShaderLabParser.DstColor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OneMinusDstColor() { return GetToken(ShaderLabParser.OneMinusDstColor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SrcAlphaSaturate() { return GetToken(ShaderLabParser.SrcAlphaSaturate, 0); }
		public BlendFactorValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blendFactorValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlendFactorValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlendFactorValueContext blendFactorValue() {
		BlendFactorValueContext _localctx = new BlendFactorValueContext(Context, State);
		EnterRule(_localctx, 84, RULE_blendFactorValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152358554653425664L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlendOpValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(ShaderLabParser.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sub() { return GetToken(ShaderLabParser.Sub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RevSub() { return GetToken(ShaderLabParser.RevSub, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Min() { return GetToken(ShaderLabParser.Min, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Max() { return GetToken(ShaderLabParser.Max, 0); }
		public BlendOpValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blendOpValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlendOpValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlendOpValueContext blendOpValue() {
		BlendOpValueContext _localctx = new BlendOpValueContext(Context, State);
		EnterRule(_localctx, 86, RULE_blendOpValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & 31L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareFuncValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Never() { return GetToken(ShaderLabParser.Never, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(ShaderLabParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(ShaderLabParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEqual() { return GetToken(ShaderLabParser.LEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(ShaderLabParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(ShaderLabParser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEqual() { return GetToken(ShaderLabParser.GEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Always() { return GetToken(ShaderLabParser.Always, 0); }
		public CompareFuncValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareFuncValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareFuncValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareFuncValueContext compareFuncValue() {
		CompareFuncValueContext _localctx = new CompareFuncValueContext(Context, State);
		EnterRule(_localctx, 88, RULE_compareFuncValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 255L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StencilOpValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Keep() { return GetToken(ShaderLabParser.Keep, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Zero() { return GetToken(ShaderLabParser.Zero, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Replace() { return GetToken(ShaderLabParser.Replace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IncrSat() { return GetToken(ShaderLabParser.IncrSat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecrSat() { return GetToken(ShaderLabParser.DecrSat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Invert() { return GetToken(ShaderLabParser.Invert, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IncrWrap() { return GetToken(ShaderLabParser.IncrWrap, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecrWrap() { return GetToken(ShaderLabParser.DecrWrap, 0); }
		public StencilOpValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stencilOpValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStencilOpValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StencilOpValueContext stencilOpValue() {
		StencilOpValueContext _localctx = new StencilOpValueContext(Context, State);
		EnterRule(_localctx, 90, RULE_stencilOpValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & 2130706433L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,84,336,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,1,0,1,0,1,0,1,0,5,0,97,8,0,10,0,12,0,100,
		9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,109,8,1,1,2,1,2,1,2,5,2,114,8,2,10,
		2,12,2,117,9,2,1,2,1,2,1,3,1,3,1,3,5,3,124,8,3,10,3,12,3,127,9,3,1,3,1,
		3,1,4,1,4,1,4,1,4,3,4,135,8,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,3,9,158,8,9,1,10,1,10,1,11,
		5,11,163,8,11,10,11,12,11,166,9,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,187,8,
		13,1,14,1,14,1,14,5,14,192,8,14,10,14,12,14,195,9,14,1,14,1,14,1,15,1,
		15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,3,17,209,8,17,1,18,1,18,1,18,
		1,19,1,19,3,19,216,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,225,8,
		19,3,19,227,8,19,1,20,1,20,3,20,231,8,20,1,20,1,20,1,20,3,20,236,8,20,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,245,8,21,1,21,3,21,248,8,21,1,
		22,1,22,1,22,5,22,253,8,22,10,22,12,22,256,9,22,1,22,1,22,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,275,
		8,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,
		1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,
		1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,
		1,37,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,
		1,44,1,44,1,45,1,45,1,45,0,0,46,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
		78,80,82,84,86,88,90,0,8,1,0,37,38,1,0,39,43,1,0,44,45,2,0,45,45,47,48,
		1,0,49,59,1,0,60,64,1,0,65,72,2,0,49,49,73,79,333,0,92,1,0,0,0,2,108,1,
		0,0,0,4,110,1,0,0,0,6,120,1,0,0,0,8,134,1,0,0,0,10,136,1,0,0,0,12,138,
		1,0,0,0,14,140,1,0,0,0,16,150,1,0,0,0,18,157,1,0,0,0,20,159,1,0,0,0,22,
		164,1,0,0,0,24,176,1,0,0,0,26,186,1,0,0,0,28,188,1,0,0,0,30,198,1,0,0,
		0,32,202,1,0,0,0,34,205,1,0,0,0,36,210,1,0,0,0,38,213,1,0,0,0,40,228,1,
		0,0,0,42,247,1,0,0,0,44,249,1,0,0,0,46,274,1,0,0,0,48,276,1,0,0,0,50,279,
		1,0,0,0,52,282,1,0,0,0,54,285,1,0,0,0,56,288,1,0,0,0,58,291,1,0,0,0,60,
		294,1,0,0,0,62,297,1,0,0,0,64,300,1,0,0,0,66,303,1,0,0,0,68,306,1,0,0,
		0,70,309,1,0,0,0,72,312,1,0,0,0,74,315,1,0,0,0,76,318,1,0,0,0,78,321,1,
		0,0,0,80,323,1,0,0,0,82,325,1,0,0,0,84,327,1,0,0,0,86,329,1,0,0,0,88,331,
		1,0,0,0,90,333,1,0,0,0,92,93,5,1,0,0,93,94,5,35,0,0,94,98,5,33,0,0,95,
		97,3,2,1,0,96,95,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,
		101,1,0,0,0,100,98,1,0,0,0,101,102,5,34,0,0,102,1,1,0,0,0,103,109,3,4,
		2,0,104,109,3,28,14,0,105,109,3,26,13,0,106,109,3,78,39,0,107,109,3,6,
		3,0,108,103,1,0,0,0,108,104,1,0,0,0,108,105,1,0,0,0,108,106,1,0,0,0,108,
		107,1,0,0,0,109,3,1,0,0,0,110,111,5,2,0,0,111,115,5,33,0,0,112,114,3,22,
		11,0,113,112,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,
		118,1,0,0,0,117,115,1,0,0,0,118,119,5,34,0,0,119,5,1,0,0,0,120,121,5,3,
		0,0,121,125,5,33,0,0,122,124,3,8,4,0,123,122,1,0,0,0,124,127,1,0,0,0,125,
		123,1,0,0,0,125,126,1,0,0,0,126,128,1,0,0,0,127,125,1,0,0,0,128,129,5,
		34,0,0,129,7,1,0,0,0,130,135,3,24,12,0,131,135,3,28,14,0,132,135,3,26,
		13,0,133,135,3,80,40,0,134,130,1,0,0,0,134,131,1,0,0,0,134,132,1,0,0,0,
		134,133,1,0,0,0,135,9,1,0,0,0,136,137,5,36,0,0,137,11,1,0,0,0,138,139,
		7,0,0,0,139,13,1,0,0,0,140,141,5,4,0,0,141,142,3,12,6,0,142,143,5,5,0,
		0,143,144,3,12,6,0,144,145,5,5,0,0,145,146,3,12,6,0,146,147,5,5,0,0,147,
		148,3,12,6,0,148,149,5,6,0,0,149,15,1,0,0,0,150,151,5,35,0,0,151,152,5,
		33,0,0,152,153,5,34,0,0,153,17,1,0,0,0,154,158,3,12,6,0,155,158,3,14,7,
		0,156,158,3,16,8,0,157,154,1,0,0,0,157,155,1,0,0,0,157,156,1,0,0,0,158,
		19,1,0,0,0,159,160,7,1,0,0,160,21,1,0,0,0,161,163,3,10,5,0,162,161,1,0,
		0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,167,1,0,0,0,166,
		164,1,0,0,0,167,168,5,80,0,0,168,169,5,4,0,0,169,170,5,35,0,0,170,171,
		5,5,0,0,171,172,3,20,10,0,172,173,5,6,0,0,173,174,5,32,0,0,174,175,3,18,
		9,0,175,23,1,0,0,0,176,177,5,7,0,0,177,178,5,35,0,0,178,25,1,0,0,0,179,
		187,3,32,16,0,180,187,3,34,17,0,181,187,3,36,18,0,182,187,3,38,19,0,183,
		187,3,40,20,0,184,187,3,42,21,0,185,187,3,44,22,0,186,179,1,0,0,0,186,
		180,1,0,0,0,186,181,1,0,0,0,186,182,1,0,0,0,186,183,1,0,0,0,186,184,1,
		0,0,0,186,185,1,0,0,0,187,27,1,0,0,0,188,189,5,8,0,0,189,193,5,33,0,0,
		190,192,3,30,15,0,191,190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,
		194,1,0,0,0,194,196,1,0,0,0,195,193,1,0,0,0,196,197,5,34,0,0,197,29,1,
		0,0,0,198,199,5,35,0,0,199,200,5,32,0,0,200,201,5,35,0,0,201,31,1,0,0,
		0,202,203,5,9,0,0,203,204,3,82,41,0,204,33,1,0,0,0,205,208,5,10,0,0,206,
		209,5,46,0,0,207,209,3,88,44,0,208,206,1,0,0,0,208,207,1,0,0,0,209,35,
		1,0,0,0,210,211,5,11,0,0,211,212,7,2,0,0,212,37,1,0,0,0,213,215,5,12,0,
		0,214,216,5,37,0,0,215,214,1,0,0,0,215,216,1,0,0,0,216,226,1,0,0,0,217,
		227,5,45,0,0,218,219,3,84,42,0,219,224,3,84,42,0,220,221,5,5,0,0,221,222,
		3,84,42,0,222,223,3,84,42,0,223,225,1,0,0,0,224,220,1,0,0,0,224,225,1,
		0,0,0,225,227,1,0,0,0,226,217,1,0,0,0,226,218,1,0,0,0,227,39,1,0,0,0,228,
		230,5,13,0,0,229,231,5,37,0,0,230,229,1,0,0,0,230,231,1,0,0,0,231,232,
		1,0,0,0,232,235,3,86,43,0,233,234,5,5,0,0,234,236,3,86,43,0,235,233,1,
		0,0,0,235,236,1,0,0,0,236,41,1,0,0,0,237,238,5,14,0,0,238,248,5,37,0,0,
		239,240,5,14,0,0,240,241,5,37,0,0,241,248,5,37,0,0,242,244,5,14,0,0,243,
		245,5,37,0,0,244,243,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,248,5,
		80,0,0,247,237,1,0,0,0,247,239,1,0,0,0,247,242,1,0,0,0,248,43,1,0,0,0,
		249,250,5,15,0,0,250,254,5,33,0,0,251,253,3,46,23,0,252,251,1,0,0,0,253,
		256,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,257,1,0,0,0,256,254,1,
		0,0,0,257,258,5,34,0,0,258,45,1,0,0,0,259,275,3,48,24,0,260,275,3,50,25,
		0,261,275,3,52,26,0,262,275,3,54,27,0,263,275,3,56,28,0,264,275,3,58,29,
		0,265,275,3,60,30,0,266,275,3,62,31,0,267,275,3,64,32,0,268,275,3,66,33,
		0,269,275,3,68,34,0,270,275,3,70,35,0,271,275,3,72,36,0,272,275,3,74,37,
		0,273,275,3,76,38,0,274,259,1,0,0,0,274,260,1,0,0,0,274,261,1,0,0,0,274,
		262,1,0,0,0,274,263,1,0,0,0,274,264,1,0,0,0,274,265,1,0,0,0,274,266,1,
		0,0,0,274,267,1,0,0,0,274,268,1,0,0,0,274,269,1,0,0,0,274,270,1,0,0,0,
		274,271,1,0,0,0,274,272,1,0,0,0,274,273,1,0,0,0,275,47,1,0,0,0,276,277,
		5,16,0,0,277,278,5,37,0,0,278,49,1,0,0,0,279,280,5,17,0,0,280,281,5,37,
		0,0,281,51,1,0,0,0,282,283,5,18,0,0,283,284,5,37,0,0,284,53,1,0,0,0,285,
		286,5,19,0,0,286,287,3,88,44,0,287,55,1,0,0,0,288,289,5,3,0,0,289,290,
		3,90,45,0,290,57,1,0,0,0,291,292,5,20,0,0,292,293,3,90,45,0,293,59,1,0,
		0,0,294,295,5,21,0,0,295,296,3,90,45,0,296,61,1,0,0,0,297,298,5,22,0,0,
		298,299,3,88,44,0,299,63,1,0,0,0,300,301,5,23,0,0,301,302,3,90,45,0,302,
		65,1,0,0,0,303,304,5,24,0,0,304,305,3,90,45,0,305,67,1,0,0,0,306,307,5,
		25,0,0,307,308,3,90,45,0,308,69,1,0,0,0,309,310,5,26,0,0,310,311,3,88,
		44,0,311,71,1,0,0,0,312,313,5,27,0,0,313,314,3,90,45,0,314,73,1,0,0,0,
		315,316,5,28,0,0,316,317,3,90,45,0,317,75,1,0,0,0,318,319,5,29,0,0,319,
		320,3,90,45,0,320,77,1,0,0,0,321,322,5,30,0,0,322,79,1,0,0,0,323,324,5,
		31,0,0,324,81,1,0,0,0,325,326,7,3,0,0,326,83,1,0,0,0,327,328,7,4,0,0,328,
		85,1,0,0,0,329,330,7,5,0,0,330,87,1,0,0,0,331,332,7,6,0,0,332,89,1,0,0,
		0,333,334,7,7,0,0,334,91,1,0,0,0,19,98,108,115,125,134,157,164,186,193,
		208,215,224,226,230,235,244,247,254,274
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace March.Editor.ShaderLab.Internal
