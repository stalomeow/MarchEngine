//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from HLSLPreprocessorParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace March.ShaderLab.Internal {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class HLSLPreprocessorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Sharp=1, BlockComment=2, LineComment=3, Code=4, Include=5, Pragma=6, DirectiveWhitespace=7, 
		DirectiveBlockComment=8, DirectiveLineComment=9, DirectiveNewline=10, 
		Newline=11, DirectiveTextNewline=12, DirectiveTextBlockComment=13, DirectiveTextLineComment=14, 
		DirectiveText=15, Slash=16;
	public const int
		RULE_program = 0, RULE_text = 1, RULE_code = 2, RULE_directive = 3, RULE_directiveText = 4;
	public static readonly string[] ruleNames = {
		"program", "text", "code", "directive", "directiveText"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", null, null, null, "'include'", "'pragma'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Sharp", "BlockComment", "LineComment", "Code", "Include", "Pragma", 
		"DirectiveWhitespace", "DirectiveBlockComment", "DirectiveLineComment", 
		"DirectiveNewline", "Newline", "DirectiveTextNewline", "DirectiveTextBlockComment", 
		"DirectiveTextLineComment", "DirectiveText", "Slash"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HLSLPreprocessorParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HLSLPreprocessorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public HLSLPreprocessorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public HLSLPreprocessorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(HLSLPreprocessorParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHLSLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IHLSLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Sharp || _la==Code) {
				{
				{
				State = 10;
				text();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 16;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sharp() { return GetToken(HLSLPreprocessorParser.Sharp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline() { return GetToken(HLSLPreprocessorParser.Newline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(HLSLPreprocessorParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHLSLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IHLSLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 2, RULE_text);
		int _la;
		try {
			State = 31;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 18;
				Match(Sharp);
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Include || _la==Pragma) {
					{
					State = 19;
					directive();
					}
				}

				State = 22;
				Match(Newline);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 23;
				Match(Sharp);
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Include || _la==Pragma) {
					{
					State = 24;
					directive();
					}
				}

				State = 27;
				Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 28;
				Match(Sharp);
				State = 29;
				code();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 30;
				code();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Code() { return GetTokens(HLSLPreprocessorParser.Code); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Code(int i) {
			return GetToken(HLSLPreprocessorParser.Code, i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHLSLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IHLSLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 4, RULE_code);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 33;
					Match(Code);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 36;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
	 
		public DirectiveContext() { }
		public virtual void CopyFrom(DirectiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreprocessorPragmaContext : DirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pragma() { return GetToken(HLSLPreprocessorParser.Pragma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveTextContext directiveText() {
			return GetRuleContext<DirectiveTextContext>(0);
		}
		public PreprocessorPragmaContext(DirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHLSLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IHLSLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorPragma(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreprocessorIncludeContext : DirectiveContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Include() { return GetToken(HLSLPreprocessorParser.Include, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveTextContext directiveText() {
			return GetRuleContext<DirectiveTextContext>(0);
		}
		public PreprocessorIncludeContext(DirectiveContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHLSLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IHLSLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 6, RULE_directive);
		int _la;
		try {
			State = 46;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Include:
				_localctx = new PreprocessorIncludeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 38;
				Match(Include);
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DirectiveText) {
					{
					State = 39;
					directiveText();
					}
				}

				}
				break;
			case Pragma:
				_localctx = new PreprocessorPragmaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 42;
				Match(Pragma);
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DirectiveText) {
					{
					State = 43;
					directiveText();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DirectiveText() { return GetTokens(HLSLPreprocessorParser.DirectiveText); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectiveText(int i) {
			return GetToken(HLSLPreprocessorParser.DirectiveText, i);
		}
		public DirectiveTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiveText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHLSLPreprocessorParserVisitor<TResult> typedVisitor = visitor as IHLSLPreprocessorParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiveText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveTextContext directiveText() {
		DirectiveTextContext _localctx = new DirectiveTextContext(Context, State);
		EnterRule(_localctx, 8, RULE_directiveText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 48;
				Match(DirectiveText);
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DirectiveText );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,16,54,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,1,0,5,0,12,8,0,10,0,
		12,0,15,9,0,1,0,1,0,1,1,1,1,3,1,21,8,1,1,1,1,1,1,1,3,1,26,8,1,1,1,1,1,
		1,1,1,1,3,1,32,8,1,1,2,4,2,35,8,2,11,2,12,2,36,1,3,1,3,3,3,41,8,3,1,3,
		1,3,3,3,45,8,3,3,3,47,8,3,1,4,4,4,50,8,4,11,4,12,4,51,1,4,0,0,5,0,2,4,
		6,8,0,0,59,0,13,1,0,0,0,2,31,1,0,0,0,4,34,1,0,0,0,6,46,1,0,0,0,8,49,1,
		0,0,0,10,12,3,2,1,0,11,10,1,0,0,0,12,15,1,0,0,0,13,11,1,0,0,0,13,14,1,
		0,0,0,14,16,1,0,0,0,15,13,1,0,0,0,16,17,5,0,0,1,17,1,1,0,0,0,18,20,5,1,
		0,0,19,21,3,6,3,0,20,19,1,0,0,0,20,21,1,0,0,0,21,22,1,0,0,0,22,32,5,11,
		0,0,23,25,5,1,0,0,24,26,3,6,3,0,25,24,1,0,0,0,25,26,1,0,0,0,26,27,1,0,
		0,0,27,32,5,0,0,1,28,29,5,1,0,0,29,32,3,4,2,0,30,32,3,4,2,0,31,18,1,0,
		0,0,31,23,1,0,0,0,31,28,1,0,0,0,31,30,1,0,0,0,32,3,1,0,0,0,33,35,5,4,0,
		0,34,33,1,0,0,0,35,36,1,0,0,0,36,34,1,0,0,0,36,37,1,0,0,0,37,5,1,0,0,0,
		38,40,5,5,0,0,39,41,3,8,4,0,40,39,1,0,0,0,40,41,1,0,0,0,41,47,1,0,0,0,
		42,44,5,6,0,0,43,45,3,8,4,0,44,43,1,0,0,0,44,45,1,0,0,0,45,47,1,0,0,0,
		46,38,1,0,0,0,46,42,1,0,0,0,47,7,1,0,0,0,48,50,5,15,0,0,49,48,1,0,0,0,
		50,51,1,0,0,0,51,49,1,0,0,0,51,52,1,0,0,0,52,9,1,0,0,0,9,13,20,25,31,36,
		40,44,46,51
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace March.ShaderLab.Internal
