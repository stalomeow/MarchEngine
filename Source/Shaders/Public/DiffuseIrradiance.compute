#pragma kernel CalcSH9Main

#include "Includes/Common.hlsl"
#include "Includes/Sampling.hlsl"
#include "Includes/SH9.hlsl"

#define NUM_SAMPLES 4096

TextureCube _RadianceMap;
SamplerState sampler_RadianceMap;
RWStructuredBuffer<float3> _SH9Coefs;

float3 GetIrradianceSH9Coef(int basisIndex)
{
    float3 coef = 0;

    for (int i = 0; i < NUM_SAMPLES; i++)
    {
        float2 xi = Hammersley(i, NUM_SAMPLES);
        float3 dir = SampleSphereUniform(xi);
        float3 radiance = _RadianceMap.SampleLevel(sampler_RadianceMap, dir, 0).rgb;

        float basis[9];
        GetSH9Basis(dir, basis);

        coef += radiance * basis[basisIndex];
    }

    coef *= 4 * PI / NUM_SAMPLES; // pdf æ˜¯ 1 / (4 * PI)
    return ConvolveSH9WithCosine(basisIndex, coef); // Convert Radiance To Irradiance
}

[numthreads(9, 1, 1)]
void CalcSH9Main(int3 dtid : SV_DispatchThreadID)
{
    _SH9Coefs[dtid.x] = GetIrradianceSH9Coef(dtid.x);
}
