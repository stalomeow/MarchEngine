#pragma kernel SSAOMain

#define AMBIENT_OCCLUSION_CALCULATING
#include "Includes/Common.hlsl"
#include "Includes/GBuffer.hlsl"
#include "Includes/AmbientOcclusion.hlsl"

#define SAMPLE_COUNT 14

// 方向固定为 8 cube corners + 6 centers of cube faces
// 但是模长是 [0.25, 1.0] 内随机的
static const float4 _BaseSampleDirections[SAMPLE_COUNT] =
{
    float4(0.144879 , 0.144879 , 0.144879 , 0),
    float4(-0.388377, -0.388377, -0.388377, 0),
    float4(-0.228041, 0.228041 , 0.228041 , 0),
    float4(0.494532 , -0.494532, -0.494532, 0),
    float4(0.397654 , 0.397654 , -0.397654, 0),
    float4(-0.352129, -0.352129, 0.352129 , 0),
    float4(-0.296018, 0.296018 , -0.296018, 0),
    float4(0.532301 , -0.532301, 0.532301 , 0),
    float4(-0.867130, 0.000000 , 0.000000 , 0),
    float4(0.809954 , 0.000000 , 0.000000 , 0),
    float4(0.000000 , -0.380581, 0.000000 , 0),
    float4(0.000000 , 0.894208 , 0.000000 , 0),
    float4(0.000000 , 0.000000 , -0.782876, 0),
    float4(0.000000 , 0.000000 , 0.635151 , 0),
};

cbuffer cbSSAO
{
    float _OcclusionRadius;
    float _OcclusionFadeStart;
    float _OcclusionFadeEnd;
    float _SurfaceEpsilon;
};

Texture2D _RandomVecMap;

float OcclusionFunction(float distZ)
{
    float occlusion = saturate((_OcclusionFadeEnd - distZ) / (_OcclusionFadeEnd - _OcclusionFadeStart));
    return step(_SurfaceEpsilon, distZ) * occlusion; // distZ >= _SurfaceEpsilon ? occlusion : 0
}

[numthreads(16, 16, 1)]
void SSAOMain(int3 dtid : SV_DispatchThreadID)
{
    float width, height;
    _SSAOMap.GetDimensions(width, height);

    if (dtid.x >= width || dtid.y >= height)
    {
        return;
    }

    float2 uv = GetUVFromTexelLocation(dtid.xy, width, height);
    GBufferData gbuffer = SampleGBufferData(uv);
    float3 p = ComputeViewSpacePosition(uv, gbuffer.depth);
    float3 n = TransformWorldToViewNormal(gbuffer.normalWS);
    float3 randVec = _RandomVecMap.SampleLevel(sampler_LinearRepeat, 4.0 * uv, 0).xyz * 2.0 - 1.0;

    float occlusionSum = 0;

    [unroll]
    for (int i = 0; i < SAMPLE_COUNT; ++i)
    {
        float3 offset = reflect(_BaseSampleDirections[i].xyz, randVec);
        float flip = sign(dot(offset, n));

        float3 samplePosVS = p + flip * _OcclusionRadius * offset;
        float4 samplePosCS = TransformViewToHClip(samplePosVS);
        float2 sampleUV = GetScreenUVFromNDC(samplePosCS.xy / samplePosCS.w);

        GBufferData sampleGBuffer = SampleGBufferData(sampleUV);
        float3 r = ComputeViewSpacePosition(sampleUV, sampleGBuffer.depth);

        float dp = max(dot(n, normalize(r - p)), 0.0);
        occlusionSum += dp * OcclusionFunction(p.z - r.z);
    }

    occlusionSum /= SAMPLE_COUNT;
    _SSAOMap[dtid.xy] = saturate(pow(1 - occlusionSum, 2));
}

#pragma kernel HBlurMain
#pragma kernel VBlurMain

#define N      256
#define RADIUS 5

// sigma = 2.0
static const float _Weights[1 + 2 * RADIUS] =
{
    0.008812229292562285,
    0.027143577143479373,
    0.06511405659938267,
    0.1216490730138096,
    0.1769983568313557,
    0.20056541423882085,
    0.1769983568313557,
    0.1216490730138096,
    0.06511405659938267,
    0.027143577143479373,
    0.008812229292562285
};

Texture2D<float> _Input;
RWTexture2D<float> _Output;
groupshared float _ColorCache[N + 2 * RADIUS];
groupshared float4 _NormalDepthCache[N + 2 * RADIUS];

[numthreads(N, 1, 1)]
void HBlurMain(int3 gtid : SV_GroupThreadID, int3 dtid : SV_DispatchThreadID)
{
    int width, height;
    _Input.GetDimensions(width, height);

    if (gtid.x < RADIUS)
    {
        int x = max(0, dtid.x - RADIUS);
        _ColorCache[gtid.x] = _Input[int2(x, dtid.y)];

        // G-Buffer 大小和 _Input 可能不一样，所以要用 Sample
        GBufferData g = SampleGBufferData(GetUVFromTexelLocation(int2(x, dtid.y), width, height));
        _NormalDepthCache[gtid.x] = float4(g.normalWS, g.depth);
    }

    if (gtid.x >= N - RADIUS)
    {
        int x = min(width - 1, dtid.x + RADIUS);
        _ColorCache[gtid.x + 2 * RADIUS] = _Input[int2(x, dtid.y)];

        // G-Buffer 大小和 _Input 可能不一样，所以要用 Sample
        GBufferData g = SampleGBufferData(GetUVFromTexelLocation(int2(x, dtid.y), width, height));
        _NormalDepthCache[gtid.x + 2 * RADIUS] = float4(g.normalWS, g.depth);
    }

    int2 loc = min(dtid.xy, int2(width - 1, height - 1));
    _ColorCache[gtid.x + RADIUS] = _Input[loc];

    // G-Buffer 大小和 _Input 可能不一样，所以要用 Sample
    GBufferData g1 = SampleGBufferData(GetUVFromTexelLocation(loc, width, height));
    _NormalDepthCache[gtid.x + RADIUS] = float4(g1.normalWS, g1.depth);

    GroupMemoryBarrierWithGroupSync();

    // 总是计入中间的值
    float result = _Weights[RADIUS] * _ColorCache[gtid.x + RADIUS];
    float weights = _Weights[RADIUS];

    float3 centerNormal = _NormalDepthCache[gtid.x + RADIUS].xyz;
    float centerDepth = _NormalDepthCache[gtid.x + RADIUS].w;

    [unroll]
    for (int i = -RADIUS; i <= RADIUS; ++i)
    {
        if (i == 0)
        {
            continue;
        }

        int cacheIndex = gtid.x + RADIUS + i;
        float3 normal = _NormalDepthCache[cacheIndex].xyz;
        float depth = _NormalDepthCache[cacheIndex].w;

        if (dot(normal, centerNormal) >= 0.8 && abs(depth - centerDepth) <= 0.2)
        {
            float w = _Weights[RADIUS + i];
            result += w * _ColorCache[cacheIndex];
            weights += w;
        }
    }

    _Output[dtid.xy] = result / weights;
}

[numthreads(1, N, 1)]
void VBlurMain(int3 gtid : SV_GroupThreadID, int3 dtid : SV_DispatchThreadID)
{
    int width, height;
    _Input.GetDimensions(width, height);

    if (gtid.y < RADIUS)
    {
        int y = max(0, dtid.y - RADIUS);
        _ColorCache[gtid.y] = _Input[int2(dtid.x, y)];

        // G-Buffer 大小和 _Input 可能不一样，所以要用 Sample
        GBufferData g = SampleGBufferData(GetUVFromTexelLocation(int2(dtid.x, y), width, height));
        _NormalDepthCache[gtid.y] = float4(g.normalWS, g.depth);
    }

    if (gtid.y >= N - RADIUS)
    {
        int y = min(height - 1, dtid.y + RADIUS);
        _ColorCache[gtid.y + 2 * RADIUS] = _Input[int2(dtid.x, y)];

        // G-Buffer 大小和 _Input 可能不一样，所以要用 Sample
        GBufferData g = SampleGBufferData(GetUVFromTexelLocation(int2(dtid.x, y), width, height));
        _NormalDepthCache[gtid.y + 2 * RADIUS] = float4(g.normalWS, g.depth);
    }

    int2 loc = min(dtid.xy, int2(width - 1, height - 1));
    _ColorCache[gtid.y + RADIUS] = _Input[loc];

    // G-Buffer 大小和 _Input 可能不一样，所以要用 Sample
    GBufferData g1 = SampleGBufferData(GetUVFromTexelLocation(loc, width, height));
    _NormalDepthCache[gtid.y + RADIUS] = float4(g1.normalWS, g1.depth);

    GroupMemoryBarrierWithGroupSync();

    // 总是计入中间的值
    float result = _Weights[RADIUS] * _ColorCache[gtid.y + RADIUS];
    float weights = _Weights[RADIUS];

    float3 centerNormal = _NormalDepthCache[gtid.y + RADIUS].xyz;
    float centerDepth = _NormalDepthCache[gtid.y + RADIUS].w;

    [unroll]
    for (int i = -RADIUS; i <= RADIUS; ++i)
    {
        if (i == 0)
        {
            continue;
        }

        int cacheIndex = gtid.y + RADIUS + i;
        float3 normal = _NormalDepthCache[cacheIndex].xyz;
        float depth = _NormalDepthCache[cacheIndex].w;

        if (dot(normal, centerNormal) >= 0.8 && abs(depth - centerDepth) <= 0.2)
        {
            float w = _Weights[RADIUS + i];
            result += w * _ColorCache[cacheIndex];
            weights += w;
        }
    }

    _Output[dtid.xy] = result / weights;
}
